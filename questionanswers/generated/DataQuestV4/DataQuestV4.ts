// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AnswerSubmitted extends ethereum.Event {
  get params(): AnswerSubmitted__Params {
    return new AnswerSubmitted__Params(this);
  }
}

export class AnswerSubmitted__Params {
  _event: AnswerSubmitted;

  constructor(event: AnswerSubmitted) {
    this._event = event;
  }

  get answerHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get questionHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get answerer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get answerLink(): string {
    return this._event.parameters[3].value.toString();
  }

  get answerDescription(): string {
    return this._event.parameters[4].value.toString();
  }

  get answerImageUrl(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class QuestionCreated extends ethereum.Event {
  get params(): QuestionCreated__Params {
    return new QuestionCreated__Params(this);
  }
}

export class QuestionCreated__Params {
  _event: QuestionCreated;

  constructor(event: QuestionCreated) {
    this._event = event;
  }

  get questionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get questioner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get imageUrl(): string {
    return this._event.parameters[4].value.toString();
  }

  get token(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get startTimestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get totalWinningAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get winnerAmount(): Array<BigInt> {
    return this._event.parameters[9].value.toBigIntArray();
  }
}

export class WinnersDeclared extends ethereum.Event {
  get params(): WinnersDeclared__Params {
    return new WinnersDeclared__Params(this);
  }
}

export class WinnersDeclared__Params {
  _event: WinnersDeclared;

  constructor(event: WinnersDeclared) {
    this._event = event;
  }

  get questionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get winners(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class DataQuestV4__answerMapResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: string;
  value4: Address;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: string,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getQuestionHash(): Bytes {
    return this.value0;
  }

  getLinkToAnswer(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getImageUrl(): string {
    return this.value3;
  }

  getAnswerer(): Address {
    return this.value4;
  }
}

export class DataQuestV4__getQuestionAnswersMapResultValue0Struct extends ethereum.Tuple {
  get questionHash(): Bytes {
    return this[0].toBytes();
  }

  get linkToAnswer(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageUrl(): string {
    return this[3].toString();
  }

  get answerer(): Address {
    return this[4].toAddress();
  }
}

export class DataQuestV4__questionAnswersMapResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: string;
  value4: Address;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: string,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getQuestionHash(): Bytes {
    return this.value0;
  }

  getLinkToAnswer(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getImageUrl(): string {
    return this.value3;
  }

  getAnswerer(): Address {
    return this.value4;
  }
}

export class DataQuestV4__questionMapResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: string;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: string,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getQuestioner(): Address {
    return this.value0;
  }

  getTitle(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getImageUrl(): string {
    return this.value3;
  }

  getToken(): Address {
    return this.value4;
  }

  getTotalWinningAmount(): BigInt {
    return this.value5;
  }

  getStartTimestamp(): BigInt {
    return this.value6;
  }

  getEndTimestamp(): BigInt {
    return this.value7;
  }
}

export class DataQuestV4 extends ethereum.SmartContract {
  static bind(address: Address): DataQuestV4 {
    return new DataQuestV4("DataQuestV4", address);
  }

  answerCounter(): BigInt {
    let result = super.call("answerCounter", "answerCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_answerCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "answerCounter",
      "answerCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  answerMap(param0: Bytes): DataQuestV4__answerMapResult {
    let result = super.call(
      "answerMap",
      "answerMap(bytes32):(bytes32,string,string,string,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new DataQuestV4__answerMapResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress()
    );
  }

  try_answerMap(
    param0: Bytes
  ): ethereum.CallResult<DataQuestV4__answerMapResult> {
    let result = super.tryCall(
      "answerMap",
      "answerMap(bytes32):(bytes32,string,string,string,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataQuestV4__answerMapResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress()
      )
    );
  }

  getQuestionAnswersMap(
    questionHash: Bytes
  ): Array<DataQuestV4__getQuestionAnswersMapResultValue0Struct> {
    let result = super.call(
      "getQuestionAnswersMap",
      "getQuestionAnswersMap(bytes32):((bytes32,string,string,string,address)[])",
      [ethereum.Value.fromFixedBytes(questionHash)]
    );

    return result[0].toTupleArray<
      DataQuestV4__getQuestionAnswersMapResultValue0Struct
    >();
  }

  try_getQuestionAnswersMap(
    questionHash: Bytes
  ): ethereum.CallResult<
    Array<DataQuestV4__getQuestionAnswersMapResultValue0Struct>
  > {
    let result = super.tryCall(
      "getQuestionAnswersMap",
      "getQuestionAnswersMap(bytes32):((bytes32,string,string,string,address)[])",
      [ethereum.Value.fromFixedBytes(questionHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        DataQuestV4__getQuestionAnswersMapResultValue0Struct
      >()
    );
  }

  getWinners(questionHash: Bytes): Array<Address> {
    let result = super.call("getWinners", "getWinners(bytes32):(address[])", [
      ethereum.Value.fromFixedBytes(questionHash)
    ]);

    return result[0].toAddressArray();
  }

  try_getWinners(questionHash: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWinners",
      "getWinners(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(questionHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  questionAnswersMap(
    param0: Bytes,
    param1: BigInt
  ): DataQuestV4__questionAnswersMapResult {
    let result = super.call(
      "questionAnswersMap",
      "questionAnswersMap(bytes32,uint256):(bytes32,string,string,string,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new DataQuestV4__questionAnswersMapResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress()
    );
  }

  try_questionAnswersMap(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<DataQuestV4__questionAnswersMapResult> {
    let result = super.tryCall(
      "questionAnswersMap",
      "questionAnswersMap(bytes32,uint256):(bytes32,string,string,string,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataQuestV4__questionAnswersMapResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress()
      )
    );
  }

  questionCounter(): BigInt {
    let result = super.call(
      "questionCounter",
      "questionCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_questionCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "questionCounter",
      "questionCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  questionMap(param0: Bytes): DataQuestV4__questionMapResult {
    let result = super.call(
      "questionMap",
      "questionMap(bytes32):(address,string,string,string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new DataQuestV4__questionMapResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_questionMap(
    param0: Bytes
  ): ethereum.CallResult<DataQuestV4__questionMapResult> {
    let result = super.tryCall(
      "questionMap",
      "questionMap(bytes32):(address,string,string,string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataQuestV4__questionMapResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  questionWinnersMap(param0: Bytes, param1: BigInt): Address {
    let result = super.call(
      "questionWinnersMap",
      "questionWinnersMap(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_questionWinnersMap(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "questionWinnersMap",
      "questionWinnersMap(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateQuestionCall extends ethereum.Call {
  get inputs(): CreateQuestionCall__Inputs {
    return new CreateQuestionCall__Inputs(this);
  }

  get outputs(): CreateQuestionCall__Outputs {
    return new CreateQuestionCall__Outputs(this);
  }
}

export class CreateQuestionCall__Inputs {
  _call: CreateQuestionCall;

  constructor(call: CreateQuestionCall) {
    this._call = call;
  }

  get title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get startTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get totalWinningAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get winnersAmount(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get imageUrl(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class CreateQuestionCall__Outputs {
  _call: CreateQuestionCall;

  constructor(call: CreateQuestionCall) {
    this._call = call;
  }
}

export class DeclareWinnersCall extends ethereum.Call {
  get inputs(): DeclareWinnersCall__Inputs {
    return new DeclareWinnersCall__Inputs(this);
  }

  get outputs(): DeclareWinnersCall__Outputs {
    return new DeclareWinnersCall__Outputs(this);
  }
}

export class DeclareWinnersCall__Inputs {
  _call: DeclareWinnersCall;

  constructor(call: DeclareWinnersCall) {
    this._call = call;
  }

  get questionHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get winners(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class DeclareWinnersCall__Outputs {
  _call: DeclareWinnersCall;

  constructor(call: DeclareWinnersCall) {
    this._call = call;
  }
}

export class SubmitAnswerCall extends ethereum.Call {
  get inputs(): SubmitAnswerCall__Inputs {
    return new SubmitAnswerCall__Inputs(this);
  }

  get outputs(): SubmitAnswerCall__Outputs {
    return new SubmitAnswerCall__Outputs(this);
  }
}

export class SubmitAnswerCall__Inputs {
  _call: SubmitAnswerCall;

  constructor(call: SubmitAnswerCall) {
    this._call = call;
  }

  get questionHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get answerLink(): string {
    return this._call.inputValues[1].value.toString();
  }

  get answerDescription(): string {
    return this._call.inputValues[2].value.toString();
  }

  get answerImageUrl(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SubmitAnswerCall__Outputs {
  _call: SubmitAnswerCall;

  constructor(call: SubmitAnswerCall) {
    this._call = call;
  }
}
